const { Telegraf, Scenes, Markup, session } = require('telegraf');
const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');
const puppeteer = require('puppeteer');
const mongoose = require('mongoose');

const connectDB = require('./db');
const Post = require('../models/Post');

const bot = new Telegraf(process.env.TOKEN, { polling: true });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

async function showPosts(ctx, postId) {
    const posts = await Post.find({});
    const post = posts.find((element) => {
        return element.post_id === postId
    });
    console.log(post);
    
    await ctx.reply(`<b>–Æ–ö–õ–ê–ù–ì–ê–ù –°–ê–ù–ê: ‚û°Ô∏è</b> ${post.createdAt.toLocaleString("ru-RU")}`, { parse_mode: 'HTML' });
    await ctx.reply(`<b>–ò–® –¢–£–†–ò: ‚û°Ô∏è</b> ${post.category}`, { parse_mode: 'HTML' });
    await ctx.reply(`<b>–Ø–®–ê–® –ñ–û–ô–ò –ë–ï–†–ò–õ–ê–î–ò–ú–ò: ‚û°Ô∏è</b> ${post.hous}`, { parse_mode: 'HTML' });
    await ctx.reply(`<b>–ö–ê–ô–°–ò –®–ê–•–ê–†–î–ê –ñ–û–ô–õ–ê–®–ì–ê–ù: ‚û°Ô∏è</b> ${post.city}`, { parse_mode: 'HTML' });
    await ctx.reply(`<b>–ë–û–ì–õ–ê–ù–ò–®: ‚û°Ô∏è</b> ${post.contacts}`, { parse_mode: 'HTML' });
    if (post.telegram.length > 4) {
        await ctx.reply(`<b>–¢–ï–õ–ï–ì–†–ê–ú: ‚û°Ô∏è</b> ${post.telegram}`, { parse_mode: 'HTML' });
    }
    if (post.instagram.length > 4) {
        await ctx.reply(`<b>–ò–ù–°–¢–ê–ì–†–ê–ú: ‚û°Ô∏è</b> ${post.instagram}`, { parse_mode: 'HTML' });
    }
    if (post.images.length > 4) {
        await ctx.reply('<b>–ö–£–®–ò–ú–ß–ê –§–û–¢–û ‚§µÔ∏è</b>', { parse_mode: 'HTML' });
        await ctx.replyWithPhoto(post.images);
    }
    if (post.locationimages.length > 4) {
        await ctx.reply('<b>–§–û–¢–û –ú–ê–ù–ó–ò–õ ‚§µÔ∏è</b>', { parse_mode: 'HTML' });
        await ctx.replyWithPhoto(post.locationimages);
    }
}

const postWizard = new Scenes.WizardScene(
    'post-wizard',
    async (ctx) => {

        if (ctx.from.id !== +process.env.ADMIN_ID) {
            ctx.scene.leave();
            return ctx.reply('‚õî');
        }
        ctx.wizard.state.data = {};
        await ctx.reply('1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }

        if (!ctx.message.photo) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
        ctx.wizard.state.data.photo = ctx.message.photo.pop().file_id;

        await ctx.reply('2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }

        ctx.wizard.state.data.hashtag = ctx.message.text;
        await ctx.reply('3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.title = ctx.message.text;
        await ctx.reply('6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.address = ctx.message.text;
        await ctx.reply('6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–æ');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }

        ctx.wizard.state.data.metro = ctx.message.text;
        await ctx.reply('4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.count = ctx.message.text;
        await ctx.reply('5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.salary = ctx.message.text;
        await ctx.reply('7Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–æ/–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ)');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.status = ctx.message.text;
        await ctx.reply('8Ô∏è‚É£ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.requirements = ctx.message.text;
        await ctx.reply('9Ô∏è‚É£ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.duties = ctx.message.text;
        await ctx.reply('üîü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.additional = ctx.message.text;
        await ctx.reply('1Ô∏è‚É£1Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç—ã');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.contacts = ctx.message.text;
        await ctx.reply('1Ô∏è‚É£2Ô∏è‚É£ –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.adminLink = ctx.message.text;
        await ctx.reply('1Ô∏è‚É£3Ô∏è‚É£ –†–µ–∫–ª–∞–º–∞ –±–æ—Ç–∞');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.botAd = ctx.message.text;
        const data = ctx.wizard.state.data;
        const postId = `post_${Date.now()}`;
        ctx.wizard.state.data.post_id = postId;

        const caption = `
    ${data.hashtag}
    
<b>üìå ${data.title}\n</b>
‚Ä¢ <b>–ò—à—á–∏: </b> ${data.count}
‚Ä¢ <b>–ú–∞–æ—à: </b> ${data.salary}
‚Ä¢ <b>–ú–∞–Ω–∑–∏–ª: </b> ${data.address}
‚Ä¢ <b>‚ìÇÔ∏è: </b> ${data.metro}
‚Ä¢ <b>–•–æ–ª–∞—Ç: </b> ${data.status}
  
üìã <b>–°–∏–∑–¥–∞–Ω —Ç–∞–ª–∞–± –∫–∏–ª–∏–Ω–∞–¥–∏:</b>
${data.requirements}
  
üõ† <b>–í–∞–∑–∏—Ñ–∞:</b>
${data.duties}
  
‚ÑπÔ∏è <b>–ö—É—à–∏–º—á–∞:</b>
${data.additional}
  
üìû <b>–ë–æ–≥–ª–∞–Ω–∏—à —É—á—É–Ω:</b>
${data.contacts}
  
üëâüèª <b>–≠—ä–ª–æ–Ω –∂–æ–π–ª–∞—à —É—á—É–Ω:</b> ${data.adminLink}
    
ü§ñ ${data.botAd}`;

        await ctx.telegram.sendPhoto(process.env.CHANNEL_ID, data.photo, {
            caption,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîç –ë–∞—Ç–∞—Ñ—Å–∏–ª',
                            url: `https://t.me/${ctx.botInfo.username}?start=${postId}`,
                        },
                    ],
                ],
            },
        });
        await ctx.reply('‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');
        await ctx.reply('–ö—É—à–∏–º—á–∞ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–∏–Ω–≥.');
        await ctx.reply('–ò—à —É—Ä–Ω–∏ –∫–∞–π—Å–∏ —Ç—É—Ä–≥–∞ –º–∞–Ω—Å—É–±?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.category = ctx.message.text;
        await ctx.reply('Yashash uchun joy beriladimi?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.hous = ctx.message.text;
        await ctx.reply('Qaysi shaharda joylashgan?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.city = ctx.message.text;
        await ctx.reply('Telegram sahifasi?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.telegram = ctx.message.text;
        await ctx.reply('Instagram sahifasi?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.instagram = ctx.message.text;
        await ctx.reply('Web sayti?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.website = ctx.message.text;
        await ctx.reply('Foto suratlari?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }

        ctx.wizard.state.data.images = ctx.message.photo.pop().file_id;
        await ctx.reply('Manzilning suratlari?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message.text === '/cancel') {
            await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.scene.leave();
        }
        ctx.wizard.state.data.locationimages = ctx.message.photo.pop().file_id;
        const data = ctx.wizard.state.data;
        console.log(ctx.startPayload);
        // –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞
        const post = new Post({
            post_id: data.post_id,
            headimg: data.photo,
            hashtag: data.hashtag,
            title: data.title,
            address: data.address,
            metro: data.metro,
            count: data.count,
            salary: data.salary,
            status: data.status,
            requirements: data.requirements,
            duties: data.duties,
            additional: data.additional,
            contacts: data.contacts,
            adminLink: data.adminLink,
            botAd: data.botAd,
            category: data.category,
            hous: data.hous,
            city: data.city,
            reviews: data.reviews,
            telegram: data.telegram,
            instagram: data.instagram,
            website: data.website,
            images: data.images,
            locationimages: data.locationimages,
        });
        await post.save();
        ctx.reply('‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
        return ctx.scene.leave();
    }
);

const stage = new Scenes.Stage([postWizard]);
bot.use(session());
bot.use(stage.middleware());

// üöÄ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
bot.command('post', (ctx) => ctx.scene.enter('post-wizard'));

// ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('cancel', (ctx) => {
    ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    ctx.scene.leave();
});



// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function homeMessageBuilder(ctx) {
    const lang = ctx.session.lang || 'uz';
    try {
        await ctx.reply(
            {
                'uz': 'üè† –ê—Å–æ—Å–∏–π –º–µ–Ω—é',
            }[lang],
            Markup.inlineKeyboard([
                [Markup.button.url({
                    'uz': '–ò—à –∏–∑–ª–∞—à üîç',
                }[lang], 'https://t.me/ishtopdimru')],
                [Markup.button.callback({
                    'uz': '–£–π –∏–∑–ª–∞—à üõè',
                }[lang], 'yashash')],
                [Markup.button.callback({
                    'uz': '–Æ—Ä–∏–¥–∏–∫ —ë—Ä–¥–∞–º ‚öñÔ∏è',
                }[lang], 'yuridik')],
                [Markup.button.url({
                    'uz': '–•–∞–±–∞—Ä –±–µ—Ä–∏—à ‚úâÔ∏è',
                }[lang], 'https://t.me/bk_juraev')],
                [Markup.button.url({
                    'uz': '–ë–æ–≥–ª–∞–Ω–∏—à üîÑ',
                }[lang], 'https://t.me/bk_juraev')]
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
}
// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
bot.start((ctx) => {
    const postId = ctx.startPayload;
    
    if (postId) {
        showPosts(ctx, postId)
        // ctx.reply('–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', {
        //     parse_mode: 'HTML',
        //     reply_markup: {
        //         inline_keyboard: [
        //             [
        //                 {
        //                     text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å WebApp',
        //                     web_app: { url: `${process.env.WEBAPPURL}?post=${postId}` }
        //                 }
        //             ]
        //         ]
        //     }
        // });
    } else {
        homeMessageBuilder(ctx)
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "yuridik"
bot.action('yuridik', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;

    try {
        await ctx.editMessageText(
            '–Æ—Ä–∏–¥–∏–∫ —ë—Ä–¥–∞–º –≤–∞ —Ö–∏–∑–º–∞—Ç–ª–∞—Ä –±—É–ª–∏–º–∏ —Ç–µ–∑ –∫—É–Ω–ª–∞—Ä–¥–∞ –∏—à–≥–∞ —Ç—É—à–∞–¥–∏!',
            Markup.inlineKeyboard([
                [Markup.button.callback('–û—Ä–∫–∞–≥–∞', 'home')]
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "yashash"
bot.action('yashash', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;

    try {
        await ctx.editMessageText(
            '–ö–≤–∞—Ä—Ç–∏—Ä–∞–ª–∞—Ä –∫–∏–¥–∏—Ä—É–≤ –±—É–ª–∏–º–∏ —è–∫–∏–Ω –≤–∞–∫—Ç–ª–∞—Ä–¥–∞ –∞–∂–æ–π–∏–± –∫—É–ª–∞–π–ª–∏–∫–ª–∞—Ä –±–∏–ª–∞–Ω –∏—à–≥–∞ —Ç—É—à–∞–¥–∏!',
            Markup.inlineKeyboard([
                [Markup.button.callback('–û—Ä–∫–∞–≥–∞', 'home')]
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
});
bot.action('home', async (ctx) => {
    const chatId = ctx.chat.id;
    ctx.session.lastMessageId = ctx.update.callback_query.message.message_id;
    const lang = ctx.session.lang || 'uz';

    try {
        await ctx.editMessageText(
            {
                'uz': 'üè† –ê—Å–æ—Å–∏–π –º–µ–Ω—é',
            }[lang],
            Markup.inlineKeyboard([
                [Markup.button.url({
                    'uz': '–ò—à –∏–∑–ª–∞—à üîç',
                }[lang], 'https://t.me/ishtopdimru')],
                [Markup.button.callback({
                    'uz': '–£–π –∏–∑–ª–∞—à üõè',
                }[lang], 'yashash')],
                [Markup.button.callback({
                    'uz': '–Æ—Ä–∏–¥–∏–∫ —ë—Ä–¥–∞–º ‚öñÔ∏è',
                }[lang], 'yuridik')],
                [Markup.button.url({
                    'uz': '–•–∞–±–∞—Ä –±–µ—Ä–∏—à ‚úâÔ∏è',
                }[lang], 'https://t.me/bk_juraev')],
                [Markup.button.url({
                    'uz': '–ë–æ–≥–ª–∞–Ω–∏—à üîÑ',
                }[lang], 'https://t.me/bk_juraev')]
            ])
        );
    } catch (error) {
        console.log('Error while slecting', error);
    }
});











bot.launch();

// üåê WebApp —Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(express.static(path.join(__dirname, 'webapp')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'webapp', 'index.html'));
});

app.listen(3000, () => {
    console.log('üåê WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:3000');
});




